from karel.stanfordkarel import *

"""
Karel should fill the whole world with beepers.
"""


def main():
    """
    You should write your code to make Karel do its task in
    this function. Make sure to delete the 'pass' line before
    starting to write your own code. You should also delete this
    comment and replace it with a better, more descriptive one.
    """
    while left_is_clear():
        drop_return()
        next_row()
        odd_move()
        next_row()
    if front_is_clear():
        # karel needs to fence post for odd world heights
        # however that is not necessary for even world heights
        move()
        if beepers_present():
            start_back()
            get_origin()
        else:
            start_back()
            drop_return()
            get_origin()
    else:
        drop_return()
        get_origin()
    
def get_origin():
    #pre-condition: karel is facing east on the first cell of the last row
    #post-condition: karel is facing east on the first cell of the first row
    turn_right()
    while front_is_clear():
        move()
    turn_left()
    
    
def odd_move():
    # for an alternate row karel needs to move before droppong beeper
    # pre condition: karel is facing east in the first cell
    # post condition: karel is facing facing east in the first cell
    if front_is_clear():
        move()
        drop_return()
    
def next_row():
    # karel moves to the next cell
    # karel is always facing east in the first cell of the next row
    if left_is_clear():
        turn_left()
        move()
        turn_right()
   
            
def drop_return():
    #karel puting beepers and returns to original position
    #karel is facing east
    drop_move()
    start_back()
    

def drop_move():
    # karel puts beepers in alternating cells of a single row.
    put_beeper()
    while front_is_clear():
        move()
        if front_is_clear():
            move()
            put_beeper()


def start_back():
    # karel returns to the starting cell and faces east.
    turn_around()
    while front_is_clear():
        move()
    turn_around()

def turn_around():
    for i in range(2):
        turn_left()
        
def turn_right():
    for i in range(3):
        turn_left()

# There is no need to edit code beyond this point
if __name__ == '__main__':
    main()
